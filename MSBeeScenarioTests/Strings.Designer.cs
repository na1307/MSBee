// Copyright (C) Microsoft Corporation. All rights reserved.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Build.Extras.FX1_1.ScenarioTests {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Build.Extras.FX1_1.ScenarioTests.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Assembly Linker (AL) was not run or did not output to {0} in this build..
        /// </summary>
        internal static string ALNotFound {
            get {
                return ResourceManager.GetString("ALNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expected build target was {0} but at least one build was done using a different target..
        /// </summary>
        internal static string BuildTargetsDoNotMatch {
            get {
                return ResourceManager.GetString("BuildTargetsDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} configuration is not specified in the test configuration file..
        /// </summary>
        internal static string ConfigurationNameMismatch {
            get {
                return ResourceManager.GetString("ConfigurationNameMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expected configuration was {0} but it was not built..
        /// </summary>
        internal static string ConfigurationsDoNotMatch {
            get {
                return ResourceManager.GetString("ConfigurationsDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expected exit code is {0} but the actual exit code was {1}..
        /// </summary>
        internal static string ExitCodesDoNotMatch {
            get {
                return ResourceManager.GetString("ExitCodesDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} should have been produced by the build but doesn&apos;t exist..
        /// </summary>
        internal static string FileDoesNotExist {
            get {
                return ResourceManager.GetString("FileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} should not exist but does..
        /// </summary>
        internal static string FileShouldNotExist {
            get {
                return ResourceManager.GetString("FileShouldNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} was created earlier than {1} seconds ago: {2}..
        /// </summary>
        internal static string FileWasNotProducedByThisBuild {
            get {
                return ResourceManager.GetString("FileWasNotProducedByThisBuild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It was expected that this test would be built targeting the {0} version of .Net Framework but at least one project was built with this compiler version: {1} .
        /// </summary>
        internal static string FrameworkVersionsDoNotMatch {
            get {
                return ResourceManager.GetString("FrameworkVersionsDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} failed..
        /// </summary>
        internal static string FunctionFailed {
            get {
                return ResourceManager.GetString("FunctionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} passed..
        /// </summary>
        internal static string FunctionPassed {
            get {
                return ResourceManager.GetString("FunctionPassed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Expected Target XML tag has an invalid value of {0}..
        /// </summary>
        internal static string InvalidExpectedTarget {
            get {
                return ResourceManager.GetString("InvalidExpectedTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FrameworkVersion XML tag has an invalid value of {0}..
        /// </summary>
        internal static string InvalidFrameworkVersion {
            get {
                return ResourceManager.GetString("InvalidFrameworkVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource {0} was not included into the {1} resource dll.
        /// </summary>
        internal static string LinkedResourceNotFound {
            get {
                return ResourceManager.GetString("LinkedResourceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A project configuration is required..
        /// </summary>
        internal static string MissingProjectConfiguration {
            get {
                return ResourceManager.GetString("MissingProjectConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A project name is required..
        /// </summary>
        internal static string MissingProjectName {
            get {
                return ResourceManager.GetString("MissingProjectName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  {0} was not found, or the .NET Framework {1} is not installed. The function is looking for {0} in the .NET Framework directory beneath the location specified in the value of the registry key {2}.  You may be able to solve the problem by doing one of the following: 1.) Install the .NET Framework. 2.) Manually set the above registry key to the correct location. .
        /// </summary>
        internal static string NETFrameworkFileWasNotFound {
            get {
                return ResourceManager.GetString("NETFrameworkFileWasNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No  LinkedResource elements in config file under  &lt;LinkedResources Name ={0}&gt;.
        /// </summary>
        internal static string NoLinkedResources {
            get {
                return ResourceManager.GetString("NoLinkedResources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FrameworkVersion XML tag contains no value..
        /// </summary>
        internal static string NullFrameworkVersion {
            get {
                return ResourceManager.GetString("NullFrameworkVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expected number of errors is {0} but the actual number of errors was {1}..
        /// </summary>
        internal static string NumberOfErrorsDoNotMatch {
            get {
                return ResourceManager.GetString("NumberOfErrorsDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expected number of warnings is {0} but the actual number of warnings was {1}..
        /// </summary>
        internal static string NumberOfWarningsDoNotMatch {
            get {
                return ResourceManager.GetString("NumberOfWarningsDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected reference {0} was not passed to the compiler..
        /// </summary>
        internal static string ReferenceNotFound {
            get {
                return ResourceManager.GetString("ReferenceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required XML attribute {0} is missing in the {1} element..
        /// </summary>
        internal static string RequiredAttributeIsMissing {
            get {
                return ResourceManager.GetString("RequiredAttributeIsMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required XML element {0} is missing.
        ///.
        /// </summary>
        internal static string RequiredElementIsMissing {
            get {
                return ResourceManager.GetString("RequiredElementIsMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected resource {0} was not passed to the compiler..
        /// </summary>
        internal static string ResourceNotFound {
            get {
                return ResourceManager.GetString("ResourceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Testing with /t:Build is unsupported. MSBee does not do incremental builds  so /t:Build behaves the same as /t:Rebuild.
        /// </summary>
        internal static string TargetBuildUnsupported {
            get {
                return ResourceManager.GetString("TargetBuildUnsupported", resourceCulture);
            }
        }
    }
}
