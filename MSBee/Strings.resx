<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreatingTempFileFailed" xml:space="preserve">
    <value>The temp output file was not created due to "{0}" {1}.</value>
  </data>
  <data name="DefaultOutputResources" xml:space="preserve">
    <value>OutputResources does not have one file name for each name in sources. Creating default file names for OutputResources.</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Deleting file "{0}".</value>
  </data>
  <data name="DeleteDirectory" xml:space="preserve">
    <value>Deleting directory "{0}".</value>
  </data>
  <data name="DeleteFailed" xml:space="preserve">
    <value>Task failed to delete "{0}".</value>
  </data>
  <data name="DeleteFailedWillRetry" xml:space="preserve">
    <value>Access was denied to "{0}"; will re-attempt deletion.</value>
  </data>
  <data name="DeleteFailedWithException" xml:space="preserve">
    <value>Task failed to delete "{0}" due to "{1}"{2}</value>
  </data>
  <data name="DirectoryCreationFailed" xml:space="preserve">
    <value>Task failed while creating a directory due to "{0}"{1}</value>
  </data>
  <data name="FileCopy" xml:space="preserve">
    <value>Copying file from "{0}" to "{1}".</value>
  </data>
  <data name="FileCopyFailed" xml:space="preserve">
    <value>Task failed to copy "{0}" to "{1}" due to "{2}"{3}</value>
  </data>
  <data name="FileReadFailed" xml:space="preserve">
    <value>The response file "{0}" could not be processed due to "{1}" {2}.</value>
  </data>
  <data name="IncorrectNumberOfMetadata" xml:space="preserve">
    <value>An incorrect number of metadata elements, {0}, were retrieved for this TaskItem.</value>
  </data>
  <data name="InvalidFileName" xml:space="preserve">
    <value>Resource file "{0}" has an invalid name. {1}</value>
  </data>
  <data name="NETFrameworkNotFound" xml:space="preserve">
    <value>The .NET Framework v1.1 is not installed.</value>
  </data>
  <data name="NETFrameworkSDKNotFound" xml:space="preserve">
    <value>The .NET Framework SDK v1.1 is not installed. </value>
  </data>
  <data name="NoRegistryKey" xml:space="preserve">
    <value>The RegistryKey property must be set.</value>
  </data>
  <data name="NoSources" xml:space="preserve">
    <value>No resources specified in "Sources". Skipping resource generation.</value>
  </data>
  <data name="NullParameter" xml:space="preserve">
    <value>The {0} parameter was null.</value>
  </data>
  <data name="OutputFileDoesNotExist" xml:space="preserve">
    <value>The {0} output file, "{1}", does not exist.</value>
  </data>
  <data name="OutputFileFailedProcessing" xml:space="preserve">
    <value>The output file "{0}" was not processed successfully (and may not have been deleted) due to "{1}" {2}.</value>
  </data>
  <data name="OutputFileHasUnexpectedSwitch" xml:space="preserve">
    <value>The output file contains an unexpected switch: {0}.</value>
  </data>
  <data name="PlatformSDKFileNotFound" xml:space="preserve">
    <value>Task failed because "{0}" was not found, or the .NET Framework SDK {1} is not installed.  The task is looking for "{0}" in the "bin" subdirectory beneath the location specified in the {2} value of the registry key {3}.  You may be able to solve the problem by doing one of the following:  1.) Install the .NET Framework SDK {1}.  2.) Manually set the above registry key to the correct location.  3.) Pass the correct location into the "ToolPath" parameter of the task.
</value>
  </data>
  <data name="RegExFailedToMatch" xml:space="preserve">
    <value>The RegEx object was unable to successfully process the output file "{0}".</value>
  </data>
  <data name="RegistryKeyNotFound" xml:space="preserve">
    <value>"{0}" does not exist in the local machine's registry.</value>
  </data>
  <data name="ToolFailed" xml:space="preserve">
    <value>"{0}" failed and returned {1}.
</value>
  </data>
  <data name="ToolPathGenerationFailed" xml:space="preserve">
    <value>The tool path could not be generated due to "{0}" {1}.</value>
  </data>
</root>